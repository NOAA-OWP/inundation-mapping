#!/bin/bash

## functions

# ------------------------------------------------------
# timing
T_total_start () {
    t0=`date +%s`
}

# ------------------------------------------------------
Tstart () {
    t1=`date +%s`
}

# ------------------------------------------------------
Tcount () {
    t2=`date +%s`
    echo "Time  = `expr $t2 \- $t1`sec"
    echo "Cumulative_Time = `expr $t2 \- $t0`sec"
}

# ============================
function Show_Error() {

	echo -e '\n*** OOPS (error): '$1'  ***'
}

# ============================
# Yes.. this is temp duplicated in shared_functions.py for now
function Check_IsInteger() {

	regexNumber='^[0-9]+$'
	if ! [[ $1 =~ $regexNumber ]]
	then
	    value_Is_Number=0  # false
	else
		value_Is_Number=1  # true
	fi
}

# ============================
# Yes.. this is temp duplicated in shared_functions.py for now
function Check_IsFileExists() {

	if ! [[ -f "$1" ]]
	then
	    file_Exists=0  # false
	else
		file_Exists=1  # true
	fi
}

# ============================
# Yes.. this is temp duplicated in shared_functions.py for now
# Allowed are alphanumber, and underscore at this time.
function Check_File_Folder_Name_Characters() {

	is_Valid=0  # false	
	regexFolderNameFormat="^[a-zA-Z0-9_-]+$"

	if [[ "$1" =~ $regexFolderNameFormat ]]; then	
		is_Valid=1  # true
	fi
}


# ============================

function Check_Valid_File_Name_Pattern() {

	is_Valid=0  # false	
	
	# this is not perfect... bash is very picky. This allows n number of alphanumberic
	# after the dot (even through we are saying {3,4} and not {3,}
	# It is also allowing it if is starts with a dot, so we will manually check that. 
	
	#It is possible for a bad delimiter to come in such as filename.jpg;newfilename.jpg and it passes (sigh).
	# so we will check the whole string for alphanumber _ and .
	# then we will check for the pattern (regexFileNameFormat). It does not perfectly but has to be good
	# enough for now until we switch it to python.
	
	regexFolderNameFormat="^[a-zA-Z0-9_.]+$"
	if ! [[ "$1" =~ $regexFolderNameFormat ]]; then	
		is_Valid=0  # true
		return 0
	fi
	
	regexFileNameFormat="^[a-zA-Z0-9\_]+?\.[a-zA-Z0-9]{3,4}"	
	if ! [ "$1" == "" ] &&  ! [ "${1::1}" = "." ]
	then
		if [[ "$1" =~ $regexFileNameFormat ]] ; then
			is_Valid=1  # true
		fi
	fi
}

# ------------------------------------------------------
export -f T_total_start
export -f Tstart
export -f Tcount


