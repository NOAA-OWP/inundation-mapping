#!/bin/bash


## Simple logging system

# If this value -nq "", then functions in this file will be printed to
# console and log file.
log_file_path=""

# If this is set, all functions will set to a file as well as screen
# Yes. it needs some validation that the log_file_path is a valid
# file name and path.
Set_log_file_path () {
    log_file_path=$1

    if [ ! -f $log_file_path ]; then
        touch $log_file_path
    else
        rm -f $log_file_path
    fi
}

# to stop other calls to make log calls to this all
Clear_log_file_path () {

    log_file_path=""
}


# if the log_file_path has been set, this will print to screen and add to log file
l_echo () {
    local msg=$1

    if [[ $log_file_path != "" ]]; then
        echo -e $msg ; echo -e $msg >> $log_file_path
    else
        echo -e $msg
    fi
}


## Timing functions

T_total_start () {
    t0=`date +%s`
}

Tstart () {
    t1=`date +%s`
}

# This one is based on the value of t1 created earlier, and end is now
Tcount () {
    t2=`date +%s`

    local total_sec=$(( $t2 - $t1))
    local dur_min=$((total_sec / 60))
    local dur_remainder_sec=$((total_sec % 60))

    local msg="Duration = $dur_min min(s) and $dur_remainder_sec sec"
    # if an arg comes in and is a file path, we can display and record to a file
    if [[ $log_file_path != "" ]]; then
        echo -e $msg ; echo -e $msg >> $log_file_path
    else
        echo -e $msg
    fi

}

# This expects a start time submitted as an arg and assumes the end time as now
Calc_Duration() {
    local start_time=$1
    local end_time=`date +%s`

    local total_sec=$(( $end_time - $start_time ))
    local dur_min=$((total_sec / 60))
    local dur_remainder_sec=$((total_sec % 60))

    local msg="Duration : $dur_min min(s) and $dur_remainder_sec sec"
    # if an arg comes in and is a file path, we can display and record to a file
    if [[ $log_file_path != "" ]]; then
        echo -e $msg ; echo -e $msg >> $log_file_path
    else
        echo -e $msg
    fi
}


Calc_Time() {
    local start_time=$1
    local end_time=`date +%s`
    local total_sec=$(( $end_time - $start_time ))
    local dur_min=$((total_sec / 60))
    local dur_remainder_sec=$((total_sec % 60))

    if (( $dur_remainder_sec < 10 )); then
        echo "$dur_min:0$dur_remainder_sec"
    else
        echo "$dur_min:$dur_remainder_sec"
    fi

}

Calc_Time_Minutes_in_Percent(){

    # git actions didn't like this. It says it returns a exit code of 1 ??? works here.
    # so we will just copy paste code from Calc_Time
    #local actual_duration=$(Calc_Time $1)


    # split off the seconds and turn it into a a percent.
    #readarray -d ":" -t time_array <<< "$actual_duration"

    #local dur_min="${time_array[0]}"
    #local dur_sec="${time_array[1]}"
    #local num_dur_sec=$((dur_sec))

    local start_time=$1
    local end_time=`date +%s`
    local total_sec=$(( $end_time - $start_time ))
    local dur_min=$((total_sec / 60))
    local dur_remainder_sec=$((total_sec % 60))
    local dur_sec_percent=$((100*$dur_remainder_sec/60))

    if (( $dur_sec_percent < 10 )); then
        echo "$dur_min.$dur_sec_percent"
    else
        echo "$dur_min.$dur_sec_percent"
    fi
}

export -f T_total_start
export -f Tstart
export -f Tcount
