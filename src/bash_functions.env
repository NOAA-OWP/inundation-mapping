#!/bin/bash

## Timing functions

T_total_start () {
    t0=`date +%s`
}

Tstart () {
    t1=`date +%s`
}

Tcount () {
    t2=`date +%s`

    local total_sec=$(( $t2 - $t1))
    local dur_min=$((total_sec / 60))
    local dur_remainder_sec=$((total_sec % 60))
    echo "Cumulative Time = $dur_min min(s) and $dur_remainder_sec sec"
}

Calc_Duration() {
    local start_time=$1
    local end_time=`date +%s`

    local total_sec=$(( $end_time - $start_time ))
    local dur_min=$((total_sec / 60))
    local dur_remainder_sec=$((total_sec % 60))
    echo "Duration = $dur_min min(s) and $dur_remainder_sec sec"
}

Calc_Time() {
    local start_time=$1
    local end_time=`date +%s`
    local total_sec=$(( $end_time - $start_time ))
    local dur_min=$((total_sec / 60))
    local dur_remainder_sec=$((total_sec % 60))

    if (( $dur_remainder_sec < 10 )); then
        echo "$dur_min:0$dur_remainder_sec"
    else
        echo "$dur_min:$dur_remainder_sec"
    fi
}

Calc_Time_Minutes_in_Percent(){

    # git actions didn't like this. It says it returns a exit code of 1 ??? works here.
    # so we will just copy paste code from Calc_Time
    #local actual_duration=$(Calc_Time $1)


    # split off the seconds and turn it into a a percent.
    #readarray -d ":" -t time_array <<< "$actual_duration"

    #local dur_min="${time_array[0]}"
    #local dur_sec="${time_array[1]}"
    #local num_dur_sec=$((dur_sec))

    local start_time=$1
    local end_time=`date +%s`
    local total_sec=$(( $end_time - $start_time ))
    local dur_min=$((total_sec / 60))
    local dur_remainder_sec=$((total_sec % 60))
    local dur_sec_percent=$((100*$dur_remainder_sec/60))

    if (( $dur_sec_percent < 10 )); then
        echo "$dur_min.$dur_sec_percent"
    else
        echo "$dur_min.$dur_sec_percent"
    fi
}

export -f T_total_start
export -f Tstart
export -f Tcount
