#contains logic for create csv of alpha stats by hydroid per huc
import sys
from osgeo import gdal, ogr
from osgeo.gdalconst import *
# Import numerical data library
import numpy as np
# Import file management library
import sys
import os
# Import data analysis library
import pandas as pd
import argparse
from pandas import DataFrame
import copy
import pathlib
import tempfile
import geopandas as gpd


from pixel_counter import zonal_stats
from pixel_counter_functions import (get_nlcd_counts, get_levee_counts, get_bridge_counts, get_nlcd_counts_inside_flood, get_mask_value_counts)
from tools_shared_functions import compute_stats_from_contingency_table



def perform_zonal_stats(huc_gpkg,agree_rast):
    stats = zonal_stats(huc_gpkg,{"agreement_raster":agree_rast})
    return stats

def assemble_hydro_alpha_for_single_huc(stats):

    in_mem_df = pd.DataFrame(columns=['HydroID','CSI','FAR','TPR','TNR','PND'])

    for dicts in stats:
        stats_dictionary = compute_stats_from_contingency_table(dicts['tn'], dicts['fn'], dicts['fp'], dicts['tp'], cell_area=100, masked_count= dicts['mp'])
        hydroid = dicts['HydroID']
        stats_dictionary['HydroID'] = hydroid
        
        
        csi = stats_dictionary['CSI']
        far = stats_dictionary['FAR']
        tpr = stats_dictionary['TPR']
        tnr = stats_dictionary['TNR']
        pnd = stats_dictionary['PND']
        
    
        dict_with_list_values = {'HydroID':[hydroid],'CSI':[csi],'FAR':[far], 'TPR':[tpr],'TNR':[tnr],'PND':[pnd]}
        
        dict_to_df = pd.DataFrame(dict_with_list_values,columns=['HydroID','CSI','FAR','TPR','TNR','PND'])
        
        concat_list = [in_mem_df, dict_to_df]

        #concatenate dataframes
        in_mem_df = pd.concat(concat_list, sort=False)
    return in_mem_df








if __name__ == "__main__":
    

    parser = argparse.ArgumentParser(description='Computes pixel counts for raster classes within a vector area.')
    parser.add_argument('-g', '--huc_gpkg',
                        help='Path to hydroid geopackage',
                        required=True)
    parser.add_argument('-a', '--agree_rast',
                        help='Path agreement raster.',
                        required=True)
    parser.add_argument('-c', '--csv',
                        help='Path to folder to hold exported csv files per huc.',
                        required=True)
    # Assign variables from arguments.
    args = vars(parser.parse_args())
    huc_gpkg = args['huc_gpkg']
    agree_rast = args['agree_rast']
    csv = args['csv']
    
#execution code



