## ============================
##  BUILDER STAGE
## ============================
FROM ghcr.io/osgeo/gdal:ubuntu-small-3.8.4 AS builder
WORKDIR /opt/builder

ARG dataDir=/data
ARG projectDir=/foss_fim
ARG depDir=/dependencies
ARG taudemVersion=98137bb6541a0d0077a9c95becfed4e56d0aa0ac
ARG taudemVersion2=81f7a07cdd3721617a30ee4e087804fddbcffa88
ENV taudemDir=$depDir/taudem/bin
ENV taudemDir2=$depDir/taudem_accelerated_flowDirections/taudem/build/bin

## ============================
## Fix APT permission issue
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
    apt-get install -y --no-install-recommends apt-utils && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /var/cache/apt/*

## ============================
## Install dependencies for compilation
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    git cmake mpich libmpich-dev libgtest-dev libboost-test-dev libnetcdf-dev \
    make gcc g++ && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /var/cache/apt/*

## ============================
## Clone repositories
RUN git clone https://github.com/dtarb/taudem.git
RUN git clone https://github.com/fernandoa123/cybergis-toolkit.git taudem_accelerated_flowDirections

## ============================
## Compile Main taudem repo ##
RUN mkdir -p taudem/bin && \
    cd taudem && git checkout $taudemVersion && \
    cd src && make

## ============================
## Compile taudem repo with accelerated flow directions ##
RUN cd taudem_accelerated_flowDirections/taudem && \
    git checkout $taudemVersion2 && \
    mkdir build && cd build && \
    cmake .. && make

## ============================
## Move needed binaries
RUN mkdir -p $taudemDir $taudemDir2
RUN cd taudem/bin && mv -t $taudemDir flowdircond streamnet gagewatershed catchhydrogeo dinfdistdown
RUN cd taudem_accelerated_flowDirections/taudem/build/bin && mv -t $taudemDir2 d8flowdir dinfflowdir

## ============================
## Fix permissions before copying to final stage
RUN chown -R root:root $depDir && chmod -R 755 $depDir

###################################################################################
##  FINAL IMAGE STAGE
## ============================
FROM ghcr.io/osgeo/gdal:ubuntu-small-3.8.4
ARG dataDir=/data
ENV projectDir=/foss_fim
ARG depDir=/dependencies
ENV inputsDir=$dataDir/inputs
ENV outputsDir=/outputs
ENV srcDir=$projectDir/src
ENV toolsDir=$projectDir/tools
ENV workDir=/fim_temp
ENV taudemDir=$depDir/taudem/bin
ENV taudemDir2=$depDir/taudem_accelerated_flowDirections/taudem/build/bin

## ============================
## ADDING FIM GROUP
ARG GroupID=10000
ARG GroupName=fim
RUN addgroup --gid $GroupID $GroupName
ENV GID=$GroupID
ENV GN=$GroupName

## ============================
## Create working directories
RUN mkdir -p $workDir $depDir

## ============================
## Fix COPY issue
COPY --from=builder $depDir $depDir
RUN chown -R root:root $depDir && chmod -R 755 $depDir

## ============================
## Install necessary packages

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update --fix-missing && \
    apt-get install -y --no-install-recommends \
    p7zip-full python3.10 python3-pip python3-dev time mpich libmpich-dev parallel libgeos-dev \
    expect tmux rsync tzdata wget make gcc g++ && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /var/cache/apt/*


# Ensure Python and Pipenv are installed
RUN python3 -m pip install --upgrade pip setuptools wheel
RUN python3 -m pip install --no-cache-dir pipenv

# Set environment variables for stability
ENV PIP_NO_CACHE_DIR=off
ENV PIPENV_VENV_IN_PROJECT=1
ENV PIPENV_NOSPIN=1

# Copy Pipfile and Pipfile.lock
COPY Pipfile .
COPY Pipfile.lock .

# Try installing dependencies (with verbose logging)
RUN pipenv install --system --deploy --ignore-pipfile --verbose || pipenv install --system --verbose

## adding AWS CLI (for bash) ##
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    ./aws/install

## adding environment variables for numba and python ##
ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8
ENV PYTHONUNBUFFERED=TRUE

## ADD TO PATHS ##
ENV PATH="$projectDir:${PATH}"
ENV PYTHONPATH="${projectDir}:${srcDir}:${srcDir}/utils:${projectDir}/data:${toolsDir}"


# ----------------------------------
# Mar 2023 / Sep 2024
# There are some nuances in the whitebox python downloads in that the first time it loads
# it goes to the internet and downloads the latest/greatest WBT (whiteboxtools) engine which is
# required for the whitebox python library to work. We don't want to have FIM attempting a download
# each time a container is opened and the whitebox engine is called.
# Instead we will setup the WBT engine at time of docker build (same as Taudem and AWS).
# Whitebox code detects that the engine it there and makes no attempt to update it.
# We download and unzip it to the same file folder that pip deployed the whitebox library.
# Whitebox also attempts to always download a folder called testdata regardless of use.
# We added an empty folder to fake out whitebox_tools.py so it doesn't try to download the folder
ENV WBT_PATH=/usr/local/lib/python3.10/dist-packages/whitebox/WBT
RUN wget -P $WBT_PATH https://www.whiteboxgeo.com/WBT_Linux/WhiteboxTools_linux_musl.zip && \
    unzip -o $WBT_PATH/WhiteboxTools_linux_musl.zip -d $WBT_PATH && \
    cp $WBT_PATH/WhiteboxTools_linux_amd64/WBT/whitebox_tools $WBT_PATH

## ============================
## Set default permissions
RUN umask 0022

## ============================
## Set entrypoint
ADD ./src/entrypoint.sh /
ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
